@page "/states/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject IToastService toastService

<GenericComponent Model="state">
	<Body>
		<StateForm @ref="stateForm" State="state" OnValidSubmit="EditAsync" ReturnAction="Return"  />
	</Body>
</GenericComponent>

@code {

    private State? state;
    private StateForm? stateForm;

    [Parameter]
    public int Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<State>($"/api/states/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response!;
    }

    public async Task EditAsync()
    {
        var responseHttp = await repository.PutAsync("/api/states", state);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        stateForm!.FormPostedSuccessfully = true;
        Return();
        await toastService.Success("Estado/Departamento editado con exito");
    }

    private void Return()
    {
        stateForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/countries/details/{state!.CountryId}");
    }


}
