@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IToastService toastService


<h3>Paises</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
	<div>
		<a class="btn btn-primary" href="/countries/create">Nuevo País</a>
	</div>
	<div class="mx-2">
		<input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
	</div>
	<div>
		<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
		<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
	</div>
</div>


<Pagination CurrentPage="currentPage"
			TotalPages="totalPages"
			SelectedPage="SelectedPage" />

<GenericList MyList="Countries">
	<Body>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>País</th>
					<th>Departamentos/Estados</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var country in Countries!)
				{
					<tr>

						<td>
							@country.Name
						</td>
						<td>
							@country.StatesNumber
						</td>

						<td>
							<a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
							<a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
							<button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>

						</td>
					</tr>
				}
			</tbody>
		</table>
	</Body>
</GenericList>

@code {
	private int currentPage = 1;
	private int totalPages;

	[Parameter]
	[SupplyParameterFromQuery]
	public string Page { get; set; } = "";

	[Parameter]
	[SupplyParameterFromQuery]

	public string Filter { get; set; } = "";

	public List<Country>? Countries { get; set; }


	protected async override Task OnInitializedAsync()
	{
		await LoadAsync();
		await LoadTotalPagesAsync();
	}

	private async Task LoadTotalPagesAsync()
	{
		var url = $"/api/countries/getPages?filter={Filter}";
		var response = await repository.GetAsync<int>(url);
		if (response.Error)
		{
			var message = await response.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		totalPages = response.Response;
	}

	private async Task LoadAsync(int page = 1)
	{
		if (!string.IsNullOrWhiteSpace(Page))
		{
			page = Convert.ToInt32(Page);
		}

		var url = $"api/countries?page={page}&filter={Filter}";
		var responseHppt = await repository.GetAsync<List<Country>>(url);
		if (responseHppt.Error)
		{
			var messageError = await responseHppt.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
			return;
		}

		Countries = responseHppt.Response;
	}

	private async Task DeleteAsync(int id)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmación",
				Text = "¿Esta seguro que quieres borrar el registro?",
				Icon = SweetAlertIcon.Question,
				ShowCancelButton = true
			});

		var confirm = string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return;
		}

		var responseHTTP = await repository.DeleteAsync($"api/countries/{id}");
		if (responseHTTP.Error)
		{
			if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/");
				return;
			}

			var mensajeError = await responseHTTP.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
			return;
		}

		await toastService.Success("País eliminado con exito");
		await LoadAsync();
		await LoadTotalPagesAsync();
	}

	private async Task SelectedPage(int page)
	{
		currentPage = page;
		await LoadAsync(page);
	}

	private async Task CleanFilterAsync()
	{
		Filter = string.Empty;
		await ApplyFilterAsync();
	}

	private async Task ApplyFilterAsync()
	{
		int page = 1;
		await LoadTotalPagesAsync();
		await LoadAsync(page);
		await SelectedPage(page);
	}


}

