@page "/countries/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject IToastService toastService

<h3>Country Edit</h3>

<GenericComponent Model="country">
    <Body>
        <CountryForm @ref="countryForm" Country="country" OnValidSubmit="EditAsync" ReturnAction="Return" />
    </Body>
</GenericComponent>

@code {
    private Country? country;
    private CountryForm? countryForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<Country>($"api/countries/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("countries");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        country = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.PutAsync("api/countries", country);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        countryForm!.FormPostedSuccessfully = true;
        Return();
        await toastService.Success("País editado con exito");
    }

    private void Return()
    {
        navigationManager.NavigateTo("countries");
    }


}
