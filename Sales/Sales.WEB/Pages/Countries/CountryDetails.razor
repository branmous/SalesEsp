@page "/countries/details/{Id:int}"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IToastService toastService


<GenericComponent Model="country">
	<Body>
		<h3>@country!.Name</h3>
		<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
			<div>
				<a class="btn btn-primary" href="/states/create/@country!.Id">Nuevo Estado/Departamento</a>
				<a class="btn btn-success" href="/countries">Regresar</a>
			</div>
			<div class="mx-2">
				<input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar estado/departamento..." @bind-value="Filter" />
			</div>
			<div>
				<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
				<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
			</div>
		</div>

		<Pagination CurrentPage="currentPage"
					TotalPages="totalPages"
					SelectedPage="SelectedPage" />

		<GenericList MyList="states">
			<Body>
				<table class="table table-striped">
					<thead>
						<tr>
							<th>Estado / Departamento</th>
							<th>Ciudades</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var state in states!)
						{
							<tr>
								<td>
									@state.Name
								</td>
								<td>
									@state.CitiesNumber
								</td>
								<td>
									<a class="btn btn-info" href="/states/details/@state.Id">Detalles</a>
									<a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
									<button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))>Borrar</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</Body>
		</GenericList>
	</Body>
</GenericComponent>

@code {

	private int currentPage = 1;
	private int totalPages;
	private Country? country;
	private List<State>? states;

	[Parameter]
	public int Id { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string Page { get; set; } = "";

	[Parameter]
	[SupplyParameterFromQuery]

	public string Filter { get; set; } = "";

	protected override async Task OnInitializedAsync()
	{
		await LoadCountry();
		await LoadAsync();
		await LoadTotalPageAsync();
	}

	private async Task LoadTotalPageAsync()
	{
		var url = $"/api/states/getPages?id={Id}&filter={Filter}";
		var response = await repository.GetAsync<int>(url);
		if (response.Error)
		{
			var message = await response.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		totalPages = response.Response;
	}

	private async Task LoadCountry()
	{
		var responseHttp = await repository.GetAsync<Country>($"/api/countries/{Id}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/countries");
				return;
			}

			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		country = responseHttp.Response;
	}

	private async Task LoadAsync(int page = 1)
	{
		if (!string.IsNullOrWhiteSpace(Page))
		{
			page = Convert.ToInt32(Page);
		}

		var url = $"/api/states?id={Id}&page={page}&filter={Filter}";
		var responseHttp = await repository.GetAsync<List<State>>(url);
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		states = responseHttp.Response;
	}

	public async Task DeleteAsync(int stateId)
	{
		var result = await sweetAlertService.FireAsync(new SweetAlertOptions
			{
				Title = "Confirmación",
				Text = "¿Realmente deseas eliminar el registro?",
				Icon = SweetAlertIcon.Question,
				ShowCancelButton = true,
				CancelButtonText = "No",
				ConfirmButtonText = "Si"
			});

		var confirm = string.IsNullOrEmpty(result.Value);
		if (confirm)
		{
			return;
		}

		var responseHttp = await repository.DeleteAsync($"/api/states/{stateId}");
		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
			{
				var message = await responseHttp.GetErrorMessageAsync();
				await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
				return;
			}
		}

		await toastService.Success("Estado/Departamento eliminado con exito");
		await LoadAsync();
		await LoadTotalPageAsync();
	}

	private async Task SelectedPage(int page)
	{
		currentPage = page;
		await LoadAsync(page);
	}

	private async Task CleanFilterAsync()
	{
		Filter = string.Empty;
		await ApplyFilterAsync();
	}

	private async Task ApplyFilterAsync()
	{
		int page = 1;
		await LoadTotalPageAsync();
		await LoadAsync(page);
		await SelectedPage(page);
	}
}
