@page "/cities/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IToastService toastService

<h3>Editar Ciudad</h3>

<GenericComponent Model="city" >

	<Body>
		<CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return"></CityForm>
	</Body>

</GenericComponent>

@code {
	private City? city;
	private CityForm? cityForm;

	[Parameter]
	public int CityId { get; set; }


	protected async override Task OnInitializedAsync()
	{
		await LoadAsync();
	}

	public async Task LoadAsync()
	{
		var response = await repository.GetAsync<City>($"/api/cities/{CityId}");
		if (response.Error)
		{
			if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/countries");
				return;
			}

			var message = await response.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;

		}

		city = response.Response;
	}

	private async Task EditAsync()
	{
		var responseHttp = await repository.PutAsync("/api/cities", city);
		if (responseHttp.Error)
		{
			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		Return();
		await toastService.Success("Ciudad modificada con éxito");
	}

	private void Return()
	{
		cityForm!.FormPostedSuccessfully = true;
		navigationManager.NavigateTo($"/states/details/{city!.StateId}");
	}
}
